using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AutoTrainController : MonoBehaviour {
    
    const int MAXAGENTS= 70;
    public static List<GameObject> agents = new List<GameObject>();
    public GameObject agent;
    public GameObject player;
    public GameObject agentPrefab;

    float time = timeReset;
    const float timeReset = 0.03f;
    float tryTime = 0.05f;
    public static float timeFromSendReceive = 0;

    public static bool waitingNews = false;


    // Use this for initialization
    void Start () {
        agents.Add(agent);
        if (AgentTrain.ONLINE)
        {
            ConnectWithPython.init();
            //ConnectWithPython.initLocal();

            agents.Add(player);
        }
       
	}
	
   
	// Update is called once per frame
	void Update () {
        spawnAgents();
        //destroyAgents();
        if (!AgentTrain.ONLINE)
            return;
        time -= Time.deltaTime;
        tryTime -= Time.deltaTime;
        //Debug.Log(waitingNews);

        if (waitingNews && tryTime < 0)
        {
            time = timeReset*1;
            tryTime = 0.05f;
            timeFromSendReceive += Time.deltaTime;
            waitingNews = !ConnectWithPython.tryReceive(agents,player);

            timeFromSendReceive = 0f;
            //return;
            Debug.Log("wait");
        }


        else if (time < 0 && !waitingNews)
        {
            string toSend = "";
            time = timeReset*1;
            tryTime = 0.05f;

            foreach (GameObject agent in agents)
            {
                if (agent == player) ;
                else
                    toSend += agent.GetComponent<AgentTrain>().state();
            }
            waitingNews = true;
            Debug.Log(toSend); 
            ConnectWithPython.send(toSend);
            //waitingNews = !ConnectWithPython.tryReceive(agents, player);

            timeFromSendReceive += Time.deltaTime;
        }




    }
    /// <summary>
    /// We destroy an agent when an agent is behind a player(smaller than -100 deggrees and bigger 100 degrees)
    /// </summary>
    void destroyAgents()
    {
        foreach(GameObject agent in agents)
        {
            float x = agent.transform.position.x;
            float z = agent.transform.position.z;
            if (x<-25-2 || x>25+2 ||z<-15-2 || z > 15+2)
            {
                agents.Remove(agent);
                if(agent!=null)
                  Destroy(agent);
            }
        }


    }
    
    void instantiateOnAutoGeneratedPosition()
    {
        bool donotAdd;
        float xStart,euclidian,x,z;
        float zStart;
        do
        {
            donotAdd = false;
            xStart = Random.Range(-10, 10);
            zStart = Random.Range(-10, 10);
            foreach (GameObject toCheck in agents)
            {
                x = Mathf.Pow(xStart - toCheck.transform.position.x, 2);
                z = Mathf.Pow(zStart - toCheck.transform.position.z, 2);
                euclidian = Mathf.Sqrt(x + z);
                if (euclidian < 2)
                    donotAdd = true;
            }



        } while (donotAdd);
        agents.Add(Instantiate(agentPrefab, new Vector3(xStart, 0.419f, zStart), new Quaternion()));

    }

    /// <summary>
    /// try to spawn an agent if number of agents smaller than MAXAGENTS
    /// </summary>
    void spawnAgents()
    {

        while (agents.Count < MAXAGENTS)
        {
            instantiateOnAutoGeneratedPosition();
        }
    }
    /// <summary>
    /// One of different methods to spawn an agent.
    /// </summary>
    void spawnAgentsMethod1()
    {

    }
    


}
